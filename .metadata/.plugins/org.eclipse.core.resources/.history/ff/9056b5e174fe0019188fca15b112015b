/**
 * This project is to display 
 * several different animations
 * using Java Drawing Panel
 * 
 * =========
 * WARNING!!: 
 * This animation may potentially 
 * trigger seizures for people with 
 * photosensitive epilepsy. Viewer 
 * discretion is advised.
 * =========
 * 
 * This animation displays: 
 * Color Change
 * A Shrinking/Expanding Ball
 * Linear Movement
 * Circular Movement
 * 
 * 
 * @author Joey Weber
 * November 03, 2019
 */

import java.awt.Color;
import java.awt.Graphics;

public class Animation {
	public static void main(String[] args) {
		DrawingPanel win = new DrawingPanel(800,800);
		win.setBackground(Color.BLACK);
		Graphics pen = win.getGraphics();
		animate(win, pen);
	}
	/**
	 * once animate is called animation of a ball commences
	 * it displays various animations
	 * 
	 * @param win takes in the DrawingPanel win created in the main method
	 * @param pen takes in the Graphics pen created in the main method
	 */
	public static void animate(DrawingPanel win, Graphics pen) {
		
		int h = win.getHeight(), w = win.getWidth(), d = 1000, direction = 1;	
		/*
		 * h and w are the height and width of the window which are used multiple times, 
		 * d is the size of the circle and direction determines where and how the circle moves
		 */
		
		int x= (w/2-d/2), y = (h/2-d/2);
		//these variable are set up this way so the circles' centers are actually centered on the point that I want.
		
		int v = 0, u = 0;
		//these variables are needed for the second circle during the split and circular movement of the animation
		
		float hue = 0, s = 0, br = 0;
		//these float variables are used to in the colorChange method
		
		while(d >= 50) {	
			/*d is decremented until the size of the circle is 50 by 50 px
			 *x and y are calculated to ensure that the circle remains in the center of the window
			 *v and u are updated to form a second circle at the same location as the first one until the next phase of the animation
			 */
			pen.fillOval(x, y, d, d);
			d -= 10;
			x= (w/2-d/2); 
			y = (h/2-d/2);
			v = x;
			u = y;
			
			colorChange(pen, hue, s, br);	//strobing happens while this method call is in the while loop
			sleepClear(win, 10);
		}
		
		while(x != win.getWidth()-101 && v != 99) {
			/*
			 * x and v move in opposite directions causing both circles to split
			 * the while loop goes until the two circles are 100 pixel from the 
			 * left and the right of the window, height is at the center
			 */
			pen.fillOval(x, y, d, d);
			pen.fillOval(v, u, d, d);
			x += direction;
			v -= direction;
			
			sleepClear(win, 1);
			colorChange(pen, hue, s, br);	//strobing animation
		}
		/*
		 * This block of code was the more complicated to calculate
		 * the previous two circles are programmed to move oppositely in a circular path.
		 * The sine methods move the u and y coordinates of the circles
		 * while cos moves x and v 
		 * 
		 * The loop goes to 180 because that it represents 180 degrees (half a rotation).
		 * The sin and cos methods require radians so 'i' degrees is converted into radians; i*(pi / 180).
		 * Because the window's center isn't (0,0), i needed to calculate the a, b, c, and f
		 * so that they would rotate roughly around (400,400).
		 * 
		 * 
		 * 
		 */
		for(int i = 0; i <= 180; i++) {
			pen.fillOval(x, y, d, d);
			pen.fillOval(v, u, d, d);
			double a = 800-((300 *  Math.sin(i*(Math.PI/180)))+400);
			double b = (300 * Math.cos(i*(Math.PI/180))) + 400;
			double c = 800-((300 *  Math.cos(i*(Math.PI/180)))+400);
			double f = 800-((300 *  Math.sin((i+180)*(Math.PI/180)))+400);
			
			x = (int) b;
			v = (int) c;
			u = (int) f;
			y = (int) a;
			
			colorChange(pen, hue, s, br);
			sleepClear(win, 1);
		}
		
		while(x != w/2 && v != w/2) {
			/*
			 * x and v move in opposite directions causing both circles to meet
			 * the while loop goes until the two circles are at the center of the window
			 */
			pen.fillOval(x, y, d, d);
			pen.fillOval(v, u, d, d);
			x += direction;
			v -= direction;
			
			sleepClear(win, 1);
			colorChange(pen, hue, s, br);
		}
		
		while(d <= 1200) {
			/*
			 * the circle expands to 1200 by 1200 px to give an white-out explosion effect
			 * the circle expands from the center by 10px for every loop
			 */
			pen.setColor(Color.WHITE);
			pen.fillOval(x, y, d, d);
			d += 10;
			x= (w/2-d/2); 
			y = (h/2-d/2);
			win.sleep(1);
		}
		
		//Create ending title card
		pen.setColor(Color.RED);
		pen.drawString("\"Strobe-splosion\"", w/2-50, h/2);	//places animation title near the center at the end
	}
	
	/**
	 * sets pen color to a random color value and returns it
	 * 
	 * @param pen is the pen with the current color
	 * @param h is the float hue value
	 * @param s is the float saturation value
	 * @param b is the float brightness value
	 * @return Graphics pen with new random color is returned
	 */
	private static Graphics colorChange(Graphics pen, float h, float s, float b) {
		h += Math.random();
		s += Math.random();
		b += 5;
		pen.setColor(Color.getHSBColor(h, s, b));	//calculates new color value 
		return pen;
	}
	
	/**
	 * just a small helper method that sets the window sleep and clear method, which is used multiple times.
	 * 
	 * @param win the window that was created at the beginning of the application
	 * @param t is the time interval in milliseconds at which the loop sleeps, creating the animation effect.
	 */
	private static void sleepClear(DrawingPanel win, int t) {
		win.sleep(t);
		win.clear();
	}
}
